package controller;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import domain.PagingVO;
import handler.PagingHandler;
import net.coobird.thumbnailator.Thumbnailator;
import net.coobird.thumbnailator.Thumbnails;
import service.BoardService;
import service.BoardServiceImpl;
import service.CommentService;
import service.CommentServiceImpl;

@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	//로그 기록을 하기위한 객체를 생성
	private static final Logger log = 
			LoggerFactory.getLogger(BoardController.class);
    
	private RequestDispatcher rdp; //jsp에서 받은 요청을 처리하고, 처리의 결과를 다른 jsp로 보내는 역활
	private String destPage; //목적지 주소 기록
	private int isOK; //DB의 구문 체크 값 저장
	//controller <-> service, service <-> dao
	private BoardService bsv; //아직 미구현 상태 (service -> interface로 생성)
	private CommentService csv;
	private String savePath; //파일 경로를 저장할 변수
	
	
   
    public BoardController() {
    	bsv = new BoardServiceImpl(); // bsv를 구현할 실제 구현객체(service => class로 생성)
    	csv = new CommentServiceImpl();
    }


	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// 모든 처리가 이루어지는 부분
		// 각 객체의 인코딩 설정
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=UTF-8");
		
		String uri = request.getRequestURI(); //jsp에서 오는 요청 주소
		log.info("uri >>>>>1>" + uri); //뒤에 오는 주소 받기위한 설정
		
		String path = uri.substring(uri.lastIndexOf("/")+1); //뒤에 주소만 뽑기
		log.info("주소 확인 " + path);
		
		switch(path) {
		case "register" :
			//글쓰기 페이지로 이동해서 페이지가 나오도록 설정
			destPage = "/board/register.jsp"; //목적지 주소 설정
			log.info("이동완료");
			break;
//		case "insert" :
//			try {
//				//jsp에서 데이터를 입력 후 -> 전송
//				//데이터를 db에 등록 한 후 -> index.jsp로 이동
//				String title = request.getParameter("title"); //모든 데이터가 String으로 변환 후 가져옴
//				String writer = request.getParameter("writer"); //모든 데이터가 String으로 변환 후 가져옴
//				String content = request.getParameter("content"); //모든 데이터가 String으로 변환 후 가져옴
//				log.info("insert check 1");
//				BoardVO bvo = new BoardVO(title, writer, content);
//				log.info("bvo>>>>>>>>" + bvo);
//				isOK = bsv.register(bvo);
//				log.info((isOK>0)? "ok" : "fals");
//				//목적지 주소 설정
//				destPage = "/index.jsp";
//			} catch (Exception e) {
//				log.info("insert error~!!");
//				e.printStackTrace();
//			}
//			break;
		case "insert" :
			try {
				//파일을 업로드할 경로 설정(업로드 할때 설정)
				savePath = getServletContext().getRealPath("/_fileUpload"); //서버가 들어있는 설정정보 를 저장하고 있는곳
				File fileDir = new File(savePath);
				log.info("파일 자장 위치 : " + savePath);
				
				
				//파일 객체를 생성하기 위한 객체(파일에 대한 정보를 설정)
				DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();
				
				fileItemFactory.setRepository(fileDir); //저장할 위치 설정 set (file객체로 생성 후 넣어야됨)
				
				fileItemFactory.setSizeThreshold(2*1024*1024); //파일을 받을때 임시메모리 용량 설정 : byte단위
				
				BoardVO bvo = new BoardVO();
				
				//multipart/form-data 형식으로 넘어온 request 객체를 다루기 쉽게 변환해주는 객체형식으로 저장
				ServletFileUpload fileUpload = new ServletFileUpload(fileItemFactory);
				
				List<FileItem> itemList = fileUpload.parseRequest(request);
				
				//DB로 넘기기 위한 BoardVO 객체로 변환. 이미지는 저장
				for(FileItem item : itemList) {
					switch(item.getFieldName()) {
					case "title":
						bvo.setTitle(item.getString("utf-8")); //인코딩 형식을 담아서 변환
						break;
					case "wrtier":
						bvo.setWriter(item.getString("utf-8"));
						break;
					case "content":
						bvo.setContent(item.getString("utf-8"));
						break;
					case "image file":
						//이미지 저장 처리가 필요
						//이미지가 필수x 없는 경우에도 처리
						//이미지가 있는지 체크
						if(item.getSize()>0) { //이미지는 데이터 크기로 비교해야함
							 //경로를 포함해서 들어오는 케이스가 있음
							String fileName = item.getName()
									.substring(item.getName().lastIndexOf("/")+1); // 파일 이름만 가져오려는 방법
						//시스템의 현재 시간_파일이름.jpg
						fileName = System.currentTimeMillis()+"_"+fileName;
						
						//파일 객체 생성 : D : ~ /fileUpload(원래경로)/시간_cat2.jpg 
						File uploadFilePath = new File(fileDir+File.separator+fileName);
						log.info("파일경로 + 이름 : " + uploadFilePath);
						
						//저장
						try {
							item.write(uploadFilePath); //자바 객체를 디스크에 쓰기
							bvo.setImage_File(fileName); //파일 이름만 넣기
							
							//썸네일 작업 : 트래픽 과다사용 방지
							Thumbnails.of(uploadFilePath).size(60, 60)
							.toFile(new File(fileDir+File.separator+"_th_"+fileName));
							
						} catch (Exception e) {
							log.info(">>>>> file writer on disk error");
							e.printStackTrace();
						}
						
						}
						break;
					}
				}
				//DB에 bvo 저장용청
				isOK = bsv.register(bvo);
				log.info("insert >>>"+(isOK>0? "ok" : "fail"));
				destPage="pageList";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		case "list" :
			try {
				log.info("list check 1");
				List<BoardVO>list = bsv.getList();
				log.info("list check 4");
				log.info(list.get(0).toString()); // 가져온 List에 첫 값을 출력
				request.setAttribute("list", list);
				destPage = "/board/list.jsp";
				//ㅣlist를 화면으로 보내기 request 객체에 실어 보내기
			} catch (Exception e) {
				e.printStackTrace();
				log.info("list error!!");
			}
			break;
			
		case "pageList" :
			try {
				//jsp 에서 파라미터 받기
				log.info("pageList시작");
				PagingVO pgvo = new PagingVO(); // 1, 10
				if(request.getParameter("pageNo") != null) {
					log.info("pageList1");
					int pageNo = Integer.parseInt((request.getParameter("pageNo")));
					int qty = Integer.parseInt(request.getParameter("qty"));
					log.info("pageNo" + pageNo + "qty" +qty);
					pgvo = new PagingVO(pageNo, qty);
				}
				//검색어 받기
				log.info("pageList2");
				String type = request.getParameter("type");
				String keyword = request.getParameter("keyword");
				pgvo.setType(type);
				pgvo.setKeyword(keyword);
				log.info("type  " + pgvo.getType() + "  keyword  " + pgvo.getKeyword());
				//pagingVO, totalCount
				int totalCount = bsv.getTotalCount(pgvo);
				log.info("전체 게시글 수 " + totalCount);
				// bsv pgvo 주고 limit 적용한 리스트 10개 가져오기
				List<BoardVO> list = bsv.getPageList(pgvo);
				log.info("pageList3");
				request.setAttribute("list", list);
				PagingHandler ph = new PagingHandler(pgvo, totalCount);
				request.setAttribute("ph", ph);
				log.info("paging 성공~");
				destPage = "/board/list.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		case "detail" :
			try {
				//jsp에서 보낸 bno 받기
				int bno = Integer.parseInt(request.getParameter("bno"));
				log.info("detail cheack 1");
				isOK = bsv.count(bno);
				BoardVO bvo = bsv.getDetail(bno);
				log.info("bvo>>>>>>>>>>>" + bvo);
				
				request.setAttribute("bvo", bvo);
				destPage = "/board/detail.jsp"; // 보내는 구문
			} catch (Exception e) {
				e.printStackTrace();
				log.info("detail 에러");
			}
			break;
			
		case "modify" :
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				log.info("modify cheack 1");
				BoardVO bvo = bsv.getDetail(bno);
				log.info("bvo>>>>>>>>>>>" + bvo);
				request.setAttribute("bvo", bvo);
				destPage = "/board/modify.jsp";
			} catch (Exception e) {
				e.printStackTrace();
				log.info("modify 에러");
			}
			break;
			
		case "edit" :
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				String title = request.getParameter("title");
				String content = request.getParameter("content");
				log.info("edit cheack 1");
				BoardVO bvo = new BoardVO(bno, title, content);
				log.info("bvo>>>" + bvo);
				isOK = bsv.modify(bvo);
				log.info((isOK > 0)? "OK" : "FAIL");
//				destPage = "list?bno="+bno;
				destPage = "list";
				log.info("들어갔냐 ?");
				
				
			} catch (Exception e) {
			 e.printStackTrace();
			 log.info("edit error");
			}
			break;
			
		case "remove" :
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				isOK = csv.remove2(bno);
				isOK = bsv.remove(bno);
				log.info("들어갔냐 ?");
				log.info((isOK>0)? "OK" : "FAIL");
				destPage="pageList"; //내부 case로 이동
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		}
		//목적지 데이터 경로로 전달해주는 객체(requestDispatcher)
				rdp = request.getRequestDispatcher(destPage);
				rdp.forward(request, response); //요청에 필요한 객체를 가지고, 경로로 이동.
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
