package controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import service.BoardService;
import service.BoardServiceImpl;

@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	//로그 기록을 하기위한 객체를 생성
	private static final Logger log = 
			LoggerFactory.getLogger(BoardController.class);
    
	private RequestDispatcher rdp; //jsp에서 받은 요청을 처리하고, 처리의 결과를 다른 jsp로 보내는 역활
	private String destPage; //목적지 주소 기록
	private int isOK; //DB의 구문 체크 값 저장
	//controller <-> service, service <-> dao
	private BoardService bsv; //아직 미구현 상태 (service -> interface로 생성)
   
    public BoardController() {
    	bsv = new BoardServiceImpl(); // bsv를 구현할 실제 구현객체(service => class로 생성)

    }


	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// 모든 처리가 이루어지는 부분
		// 각 객체의 인코딩 설정
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=UTF-8");
		
		String uri = request.getRequestURI(); //jsp에서 오는 요청 주소
		log.info("uri >>>>>>" + uri); //뒤에 오는 주소 받기위한 설정
		
		String path = uri.substring(uri.lastIndexOf("/")+1); //뒤에 주소만 뽑기
		log.info("주소 확인" + path);
		
		switch(path) {
		case "register" :
			//글쓰기 페이지로 이동해서 페이지가 나오도록 설정
			destPage = "/board/register.jsp"; //목적지 주소 설정
			log.info("이동완료");
			break;
		case "insert" :
			try {
				//jsp에서 데이터를 입력 후 -> 전송
				//데이터를 db에 등록 한 후 -> index.jsp로 이동
				String title = request.getParameter("title"); //모든 데이터가 String으로 변환 후 가져옴
				String writer = request.getParameter("writer"); //모든 데이터가 String으로 변환 후 가져옴
				String content = request.getParameter("content"); //모든 데이터가 String으로 변환 후 가져옴
				log.info("insert check 1");
				BoardVO bvo = new BoardVO(title, writer, content);
				log.info("bvo>>>>>>>>" + bvo);
				isOK = bsv.register(bvo);
				log.info((isOK>0)? "ok" : "fals");
				//목적지 주소 설정
				destPage = "/index.jsp";
			} catch (Exception e) {
				log.info("insert error~!!");
				e.printStackTrace();
			}
			break;
			
		case "list" :
			try {
				log.info("list check 1");
				List<BoardVO>list = bsv.getList();
				log.info("list check 4");
				log.info(list.get(0).toString()); // 가져온 List에 첫 값을 출력
				request.setAttribute("list", list);
				destPage = "/board/list.jsp";
				//ㅣlist를 화면으로 보내기 request 객체에 실어 보내기
			} catch (Exception e) {
				e.printStackTrace();
				log.info("list error!!");
			}
			break;
			
		case "detail" :
			try {
				//jsp에서 보낸 bno 받기
				int bno = Integer.parseInt(request.getParameter("bno"));
				log.info("detail cheack 1");
				BoardVO bvo = bsv.getDetail(bno);
				log.info("bvo>>>>>>>>>>>" + bvo);
				request.setAttribute("bvo", bvo);
				destPage = "/board/detail.jsp"; // 보내는 구문
			} catch (Exception e) {
				e.printStackTrace();
				log.info("detail 에러");
			}
			break;
			
		case "modify" :
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				log.info("modify cheack 1");
				BoardVO bvo = bsv.getDetail(bno);
				log.info("bvo>>>>>>>>>>>" + bvo);
				request.setAttribute("bvo", bvo);
				destPage = "/board/modify.jsp";
			} catch (Exception e) {
				e.printStackTrace();
				log.info("modify 에러");
			}
			break;
			
		case "edit" :
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				String title = request.getParameter("title");
				String content = request.getParameter("content");
				log.info("edit cheack 1");
				BoardVO bvo = new BoardVO(bno, title, content);
				log.info("bvo>>>" + bvo);
				isOK = bsv.modify(bvo);
				log.info((isOK > 0)? "OK" : "FAIL");
//				destPage = "list?bno="+bno;
				destPage = "list";
				log.info("들어갔냐 ?");
				
				
			} catch (Exception e) {
			 e.printStackTrace();
			 log.info("edit error");
			}
			break;
			
		case "remove" :
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				isOK = bsv.remove(bno);
				log.info("들어갔냐 ?");
				log.info((isOK>0)? "OK" : "FAIL");
				destPage="list"; //내부 case로 이동
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		
		}
		
		//목적지 데이터 경로로 전달해주는 객체(requestDispatcher)
				rdp = request.getRequestDispatcher(destPage);
				rdp.forward(request, response); //요청에 필요한 객체를 가지고, 경로로 이동.
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
